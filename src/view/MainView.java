/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package view;

import controller.DoctorController;
import controller.NurseController;
import controller.PatientController;
import controller.RoomController;
import java.awt.Color;
import java.awt.Component;
import java.text.SimpleDateFormat;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.Iterator;
import java.util.List;
import javax.swing.JOptionPane;
import javax.swing.JPanel;
import javax.swing.table.DefaultTableModel;
import model.Doctor;
import model.Nurse;
import model.Patient;
import model.Room;
import util.MapHelper;
import util.TextPrompt;

/**
 *
 * @author Felipe Chaparro
 */
public class MainView extends javax.swing.JFrame {

    NurseController nc;
    DoctorController dc;
    PatientController pc;
    RoomController rc;
    Nurse nurse;
    Doctor doctor;

    DefaultTableModel tableModel;
    DefaultTableModel tableModel2;
    boolean updateFlag;
    SimpleDateFormat format;
    SimpleDateFormat birthFormat;
    Component confirmation;

    /**
     * Creates new form MainView
     */
    public MainView() {

        initComponents();
        jTabbedPane2.setEnabledAt(1, false);
        jTabbedPane2.setEnabledAt(2, false);

        JPanel panel = new JPanel();
        panel.setLayout(null);
        setSize(1158, 545);
        //setDefaultCloseOperation(EXIT_ON_CLOSE);
        setLocationRelativeTo(null);
        color.setBackground(Color.WHITE);

        TextPrompt temp1 = new TextPrompt("DD/MM/AAAA", birthdateTF);
        TextPrompt temp2 = new TextPrompt("DD/MM/AAAA/HH:MM", startWorkTF);
        TextPrompt temp3 = new TextPrompt("DD/MM/AAAA/HH:MM", endWorkTF);
        TextPrompt temp4 = new TextPrompt("DD/MM/AAAA", Tf_PatientBIRTHDATE);
        TextPrompt temp5 = new TextPrompt("DD/MM/AAAA/HH:MM", Tf_PatientENTRYTIME);
        TextPrompt temp6 = new TextPrompt("DD/MM/AAAA/HH:MM", Tf_PatientDEPARTURETIME);

        nc = new NurseController();
        dc = new DoctorController();
        pc = new PatientController();
        rc = new RoomController();
        nurse = new Nurse();
        doctor = new Doctor();
        format = new SimpleDateFormat("MM/dd/yyyy/HH:mm");
        birthFormat = new SimpleDateFormat("MM/dd/yyyy");

        //Table config
        String[] columnNamesTableEmployee = new String[]{"ID", "FIRSTNAME", "LASTNAME", "TYPE_EMPLOYEE"};
        tableModel = new DefaultTableModel();
        tableModel.setColumnIdentifiers(columnNamesTableEmployee);
        employeeTable.setModel(tableModel);

        String[] columnNamesTablePatient = new String[]{"ID", "FIRSTNAME", "LASTNAME", "DOCTOR", "NURSE", "DIAGNOSTIC", "ROOM"};
        tableModel2 = new DefaultTableModel();
        tableModel2.setColumnIdentifiers(columnNamesTablePatient);
        tablePatient.setModel(tableModel2);

        populateDoctor();
        populateNurse();
        populateRoom();

    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jScrollPane2 = new javax.swing.JScrollPane();
        jTable1 = new javax.swing.JTable();
        jTabbedPane2 = new javax.swing.JTabbedPane();
        P_Main = new javax.swing.JPanel();
        B_Exit = new javax.swing.JButton();
        B_EnterEmployee = new javax.swing.JButton();
        jLabel3 = new javax.swing.JLabel();
        B_EnterPatient = new javax.swing.JButton();
        jLabel5 = new javax.swing.JLabel();
        jLabel7 = new javax.swing.JLabel();
        jLabel8 = new javax.swing.JLabel();
        P_Employee = new javax.swing.JPanel();
        Name = new javax.swing.JLabel();
        BirthDate = new javax.swing.JLabel();
        Id = new javax.swing.JLabel();
        City = new javax.swing.JLabel();
        cityTF = new javax.swing.JTextField();
        firstNameTF = new javax.swing.JTextField();
        lastNameTF = new javax.swing.JTextField();
        birthdateTF = new javax.swing.JTextField();
        idTF = new javax.swing.JTextField();
        LastName = new javax.swing.JLabel();
        Blootype = new javax.swing.JLabel();
        Gender = new javax.swing.JLabel();
        blootypeTF = new javax.swing.JTextField();
        genderTF = new javax.swing.JTextField();
        Salary = new javax.swing.JLabel();
        salaryTF = new javax.swing.JTextField();
        turnTF = new javax.swing.JTextField();
        Turn = new javax.swing.JLabel();
        StartWork = new javax.swing.JLabel();
        EndWork = new javax.swing.JLabel();
        startWorkTF = new javax.swing.JTextField();
        endWorkTF = new javax.swing.JTextField();
        LabelEmployee = new javax.swing.JLabel();
        Tf_TypeEmployee = new javax.swing.JTextField();
        guardar = new javax.swing.JButton();
        eliminar = new javax.swing.JButton();
        jLabel2 = new javax.swing.JLabel();
        ComboxEmployee = new javax.swing.JComboBox<>();
        jScrollPane1 = new javax.swing.JScrollPane();
        employeeTable = new javax.swing.JTable();
        SORT = new javax.swing.JButton();
        ExitEmployee = new javax.swing.JButton();
        jLabel9 = new javax.swing.JLabel();
        Tf_Buscar = new javax.swing.JTextField();
        B_Search = new javax.swing.JButton();
        P_Patient = new javax.swing.JPanel();
        idPatient = new javax.swing.JLabel();
        firstNamePa = new javax.swing.JLabel();
        lastNamePa = new javax.swing.JLabel();
        jLabel6 = new javax.swing.JLabel();
        birthDatePa = new javax.swing.JLabel();
        cityPa = new javax.swing.JLabel();
        blootypePa = new javax.swing.JLabel();
        genderPa = new javax.swing.JLabel();
        jLabel4 = new javax.swing.JLabel();
        Tf_PatientID = new javax.swing.JTextField();
        Tf_PatientNAME = new javax.swing.JTextField();
        Tf_PatientLASTNAME = new javax.swing.JTextField();
        Tf_PatientBIRTHDATE = new javax.swing.JTextField();
        Tf_PatientCITY = new javax.swing.JTextField();
        Tf_PatientBLOOTYPE = new javax.swing.JTextField();
        Tf_PatientGENDER = new javax.swing.JTextField();
        Tf_PatientDEPARTURETIME = new javax.swing.JTextField();
        entryTimePatient = new javax.swing.JLabel();
        departureTimePa = new javax.swing.JLabel();
        Tf_PatientDIAGNOSTIC = new javax.swing.JTextField();
        Tf_PatientENTRYTIME = new javax.swing.JTextField();
        diagnosticPatient = new javax.swing.JLabel();
        Doctor_ComboBox = new javax.swing.JComboBox<>();
        Nurse_ComboBox = new javax.swing.JComboBox<>();
        DoctorPat = new javax.swing.JLabel();
        nursePat = new javax.swing.JLabel();
        jScrollPane3 = new javax.swing.JScrollPane();
        tablePatient = new javax.swing.JTable();
        savePatient = new javax.swing.JButton();
        deletePatient = new javax.swing.JButton();
        RoomPat = new javax.swing.JLabel();
        Room_ComboBox = new javax.swing.JComboBox<>();
        sortPatient = new javax.swing.JButton();
        ExitPatient = new javax.swing.JButton();
        jLabel1 = new javax.swing.JLabel();
        color = new javax.swing.JPanel();
        imagen = new javax.swing.JLabel();

        jTable1.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "Title 1", "Title 2", "Title 3", "Title 4"
            }
        ));
        jScrollPane2.setViewportView(jTable1);

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setBackground(new java.awt.Color(0, 0, 0));
        setUndecorated(true);

        jTabbedPane2.setBackground(new java.awt.Color(255, 255, 255));
        jTabbedPane2.setBorder(javax.swing.BorderFactory.createBevelBorder(javax.swing.border.BevelBorder.RAISED));
        jTabbedPane2.setForeground(new java.awt.Color(204, 0, 0));

        P_Main.setBackground(new java.awt.Color(204, 0, 0));

        B_Exit.setBackground(new java.awt.Color(255, 255, 255));
        B_Exit.setFont(new java.awt.Font("Dialog", 1, 14)); // NOI18N
        B_Exit.setForeground(new java.awt.Color(204, 0, 0));
        B_Exit.setText("BACK");
        B_Exit.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                B_ExitActionPerformed(evt);
            }
        });

        B_EnterEmployee.setBackground(new java.awt.Color(255, 255, 255));
        B_EnterEmployee.setFont(new java.awt.Font("Dialog", 1, 14)); // NOI18N
        B_EnterEmployee.setForeground(new java.awt.Color(204, 0, 0));
        B_EnterEmployee.setText("CREATE EMPLOYEE");
        B_EnterEmployee.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                B_EnterEmployeeActionPerformed(evt);
            }
        });

        jLabel3.setFont(new java.awt.Font("Dialog", 1, 36)); // NOI18N
        jLabel3.setForeground(new java.awt.Color(255, 255, 255));
        jLabel3.setText("  SOGAMOSO REGIONAL HOSPITAL");

        B_EnterPatient.setBackground(new java.awt.Color(255, 255, 255));
        B_EnterPatient.setFont(new java.awt.Font("Dialog", 1, 14)); // NOI18N
        B_EnterPatient.setForeground(new java.awt.Color(204, 0, 0));
        B_EnterPatient.setText("ENTER PATIENT");
        B_EnterPatient.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                B_EnterPatientActionPerformed(evt);
            }
        });

        jLabel5.setIcon(new javax.swing.ImageIcon(getClass().getResource("/view/Imagen_Employee.png"))); // NOI18N

        jLabel7.setIcon(new javax.swing.ImageIcon(getClass().getResource("/view/Imagen_Paciente.png"))); // NOI18N

        jLabel8.setIcon(new javax.swing.ImageIcon(getClass().getResource("/view/Imagen_Salir.png"))); // NOI18N

        javax.swing.GroupLayout P_MainLayout = new javax.swing.GroupLayout(P_Main);
        P_Main.setLayout(P_MainLayout);
        P_MainLayout.setHorizontalGroup(
            P_MainLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(P_MainLayout.createSequentialGroup()
                .addGap(114, 114, 114)
                .addComponent(jLabel3)
                .addGap(0, 123, Short.MAX_VALUE))
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, P_MainLayout.createSequentialGroup()
                .addGroup(P_MainLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(B_EnterEmployee, javax.swing.GroupLayout.PREFERRED_SIZE, 230, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(P_MainLayout.createSequentialGroup()
                        .addComponent(jLabel5)
                        .addGap(56, 56, 56)))
                .addGroup(P_MainLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                    .addGroup(P_MainLayout.createSequentialGroup()
                        .addGap(62, 62, 62)
                        .addComponent(jLabel7)
                        .addGap(91, 91, 91)
                        .addComponent(jLabel8, javax.swing.GroupLayout.PREFERRED_SIZE, 147, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(115, 115, 115))
                    .addGroup(javax.swing.GroupLayout.Alignment.LEADING, P_MainLayout.createSequentialGroup()
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(B_EnterPatient, javax.swing.GroupLayout.PREFERRED_SIZE, 230, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(B_Exit, javax.swing.GroupLayout.PREFERRED_SIZE, 230, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))))
        );
        P_MainLayout.setVerticalGroup(
            P_MainLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(P_MainLayout.createSequentialGroup()
                .addGap(88, 88, 88)
                .addComponent(jLabel3)
                .addGap(75, 75, 75)
                .addGroup(P_MainLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(jLabel5, javax.swing.GroupLayout.PREFERRED_SIZE, 112, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel8, javax.swing.GroupLayout.PREFERRED_SIZE, 124, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel7))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(P_MainLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(B_EnterEmployee)
                    .addComponent(B_EnterPatient)
                    .addComponent(B_Exit))
                .addContainerGap(128, Short.MAX_VALUE))
        );

        jTabbedPane2.addTab("MAIN", P_Main);

        P_Employee.setBackground(new java.awt.Color(204, 0, 0));

        Name.setForeground(new java.awt.Color(255, 255, 255));
        Name.setText("FIRST NAME:");
        Name.setMaximumSize(new java.awt.Dimension(60, 16));
        Name.setMinimumSize(new java.awt.Dimension(60, 16));
        Name.setPreferredSize(new java.awt.Dimension(60, 16));

        BirthDate.setForeground(new java.awt.Color(255, 255, 255));
        BirthDate.setText("BIRTHDATE:");

        Id.setForeground(new java.awt.Color(255, 255, 255));
        Id.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        Id.setText("ID:");

        City.setForeground(new java.awt.Color(255, 255, 255));
        City.setText("CITY:");

        cityTF.setBackground(new java.awt.Color(255, 255, 255));
        cityTF.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cityTFActionPerformed(evt);
            }
        });

        firstNameTF.setBackground(new java.awt.Color(255, 255, 255));
        firstNameTF.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                firstNameTFActionPerformed(evt);
            }
        });

        lastNameTF.setBackground(new java.awt.Color(255, 255, 255));
        lastNameTF.setToolTipText("");
        lastNameTF.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                lastNameTFActionPerformed(evt);
            }
        });

        birthdateTF.setBackground(new java.awt.Color(255, 255, 255));
        birthdateTF.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                birthdateTFActionPerformed(evt);
            }
        });

        idTF.setBackground(new java.awt.Color(255, 255, 255));
        idTF.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                idTFActionPerformed(evt);
            }
        });

        LastName.setForeground(new java.awt.Color(255, 255, 255));
        LastName.setText("LAST NAME:");
        LastName.setMaximumSize(new java.awt.Dimension(60, 16));
        LastName.setMinimumSize(new java.awt.Dimension(60, 16));
        LastName.setPreferredSize(new java.awt.Dimension(60, 16));

        Blootype.setForeground(new java.awt.Color(255, 255, 255));
        Blootype.setText("BLOOTYPE:");

        Gender.setForeground(new java.awt.Color(255, 255, 255));
        Gender.setText("GENDER:");

        blootypeTF.setBackground(new java.awt.Color(255, 255, 255));
        blootypeTF.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                blootypeTFActionPerformed(evt);
            }
        });

        genderTF.setBackground(new java.awt.Color(255, 255, 255));
        genderTF.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                genderTFActionPerformed(evt);
            }
        });

        Salary.setForeground(new java.awt.Color(255, 255, 255));
        Salary.setText("SALARY:");

        salaryTF.setBackground(new java.awt.Color(255, 255, 255));
        salaryTF.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                salaryTFActionPerformed(evt);
            }
        });

        turnTF.setBackground(new java.awt.Color(255, 255, 255));
        turnTF.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                turnTFActionPerformed(evt);
            }
        });

        Turn.setForeground(new java.awt.Color(255, 255, 255));
        Turn.setText("TURN:");

        StartWork.setForeground(new java.awt.Color(255, 255, 255));
        StartWork.setText("START DATE WORK:");

        EndWork.setForeground(new java.awt.Color(255, 255, 255));
        EndWork.setText("END DATE WORK:");

        startWorkTF.setBackground(new java.awt.Color(255, 255, 255));
        startWorkTF.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                startWorkTFActionPerformed(evt);
            }
        });

        endWorkTF.setBackground(new java.awt.Color(255, 255, 255));
        endWorkTF.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                endWorkTFActionPerformed(evt);
            }
        });

        LabelEmployee.setForeground(new java.awt.Color(255, 255, 255));

        Tf_TypeEmployee.setBackground(new java.awt.Color(255, 255, 255));
        Tf_TypeEmployee.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                Tf_TypeEmployeeActionPerformed(evt);
            }
        });

        guardar.setBackground(new java.awt.Color(255, 255, 255));
        guardar.setText("SAVE");
        guardar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                guardarActionPerformed(evt);
            }
        });

        eliminar.setBackground(new java.awt.Color(255, 255, 255));
        eliminar.setText("DELETE");
        eliminar.setEnabled(false);
        eliminar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                eliminarActionPerformed(evt);
            }
        });

        jLabel2.setFont(new java.awt.Font("Dialog", 1, 24)); // NOI18N
        jLabel2.setForeground(new java.awt.Color(255, 255, 255));
        jLabel2.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel2.setText("HOSPITAL EMPLOYEE");

        ComboxEmployee.setBackground(new java.awt.Color(255, 255, 255));
        ComboxEmployee.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Nurse", "Doctor" }));
        ComboxEmployee.setToolTipText("Nurse\nDoctor");
        ComboxEmployee.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                ComboxEmployeeActionPerformed(evt);
            }
        });

        employeeTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "Title 1", "Title 2", "Title 3", "Title 4"
            }
        ));
        employeeTable.setSelectionBackground(new java.awt.Color(255, 0, 0));
        employeeTable.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                employeeTableMouseClicked(evt);
            }
        });
        jScrollPane1.setViewportView(employeeTable);

        SORT.setBackground(new java.awt.Color(255, 255, 255));
        SORT.setText("SORT");
        SORT.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                SORTActionPerformed(evt);
            }
        });

        ExitEmployee.setBackground(new java.awt.Color(255, 255, 255));
        ExitEmployee.setText("EXIT");
        ExitEmployee.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                ExitEmployeeActionPerformed(evt);
            }
        });

        jLabel9.setForeground(new java.awt.Color(255, 255, 255));
        jLabel9.setText("SEARCH ID: ");

        Tf_Buscar.setBackground(new java.awt.Color(255, 255, 255));
        Tf_Buscar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                Tf_BuscarActionPerformed(evt);
            }
        });

        B_Search.setBackground(new java.awt.Color(255, 255, 255));
        B_Search.setText("SEARCH");
        B_Search.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                B_SearchMouseClicked(evt);
            }
        });
        B_Search.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                B_SearchActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout P_EmployeeLayout = new javax.swing.GroupLayout(P_Employee);
        P_Employee.setLayout(P_EmployeeLayout);
        P_EmployeeLayout.setHorizontalGroup(
            P_EmployeeLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(P_EmployeeLayout.createSequentialGroup()
                .addGap(71, 71, 71)
                .addGroup(P_EmployeeLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addGroup(P_EmployeeLayout.createSequentialGroup()
                        .addComponent(Id)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(idTF, javax.swing.GroupLayout.PREFERRED_SIZE, 166, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(P_EmployeeLayout.createSequentialGroup()
                        .addComponent(Name, javax.swing.GroupLayout.PREFERRED_SIZE, 90, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(firstNameTF, javax.swing.GroupLayout.PREFERRED_SIZE, 166, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(P_EmployeeLayout.createSequentialGroup()
                        .addGroup(P_EmployeeLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(BirthDate)
                            .addComponent(City)
                            .addComponent(Blootype)
                            .addComponent(Gender)
                            .addComponent(Salary)
                            .addComponent(Turn)
                            .addComponent(StartWork)
                            .addComponent(EndWork)
                            .addComponent(LabelEmployee)
                            .addComponent(LastName, javax.swing.GroupLayout.PREFERRED_SIZE, 79, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(29, 29, 29)
                        .addGroup(P_EmployeeLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(cityTF, javax.swing.GroupLayout.PREFERRED_SIZE, 166, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(birthdateTF, javax.swing.GroupLayout.PREFERRED_SIZE, 166, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(blootypeTF, javax.swing.GroupLayout.PREFERRED_SIZE, 166, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(genderTF, javax.swing.GroupLayout.PREFERRED_SIZE, 166, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(salaryTF, javax.swing.GroupLayout.PREFERRED_SIZE, 166, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(turnTF, javax.swing.GroupLayout.PREFERRED_SIZE, 166, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(startWorkTF, javax.swing.GroupLayout.PREFERRED_SIZE, 166, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(endWorkTF, javax.swing.GroupLayout.PREFERRED_SIZE, 166, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(Tf_TypeEmployee, javax.swing.GroupLayout.PREFERRED_SIZE, 166, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(lastNameTF, javax.swing.GroupLayout.PREFERRED_SIZE, 166, javax.swing.GroupLayout.PREFERRED_SIZE))))
                .addGroup(P_EmployeeLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(P_EmployeeLayout.createSequentialGroup()
                        .addGap(30, 30, 30)
                        .addGroup(P_EmployeeLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                            .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 389, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addGroup(javax.swing.GroupLayout.Alignment.LEADING, P_EmployeeLayout.createSequentialGroup()
                                .addComponent(guardar, javax.swing.GroupLayout.PREFERRED_SIZE, 116, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(18, 18, 18)
                                .addComponent(eliminar, javax.swing.GroupLayout.PREFERRED_SIZE, 114, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addComponent(SORT, javax.swing.GroupLayout.PREFERRED_SIZE, 114, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(javax.swing.GroupLayout.Alignment.LEADING, P_EmployeeLayout.createSequentialGroup()
                                .addGap(69, 69, 69)
                                .addComponent(ExitEmployee, javax.swing.GroupLayout.PREFERRED_SIZE, 114, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(18, 18, 18)
                                .addComponent(B_Search, javax.swing.GroupLayout.PREFERRED_SIZE, 114, javax.swing.GroupLayout.PREFERRED_SIZE)))
                        .addGap(0, 61, Short.MAX_VALUE))
                    .addGroup(P_EmployeeLayout.createSequentialGroup()
                        .addGroup(P_EmployeeLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(P_EmployeeLayout.createSequentialGroup()
                                .addGap(84, 84, 84)
                                .addGroup(P_EmployeeLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addGroup(P_EmployeeLayout.createSequentialGroup()
                                        .addGap(13, 13, 13)
                                        .addComponent(jLabel9)
                                        .addGap(44, 44, 44)
                                        .addComponent(Tf_Buscar, javax.swing.GroupLayout.PREFERRED_SIZE, 135, javax.swing.GroupLayout.PREFERRED_SIZE))
                                    .addComponent(jLabel2, javax.swing.GroupLayout.PREFERRED_SIZE, 285, javax.swing.GroupLayout.PREFERRED_SIZE)))
                            .addGroup(P_EmployeeLayout.createSequentialGroup()
                                .addGap(152, 152, 152)
                                .addComponent(ComboxEmployee, javax.swing.GroupLayout.PREFERRED_SIZE, 135, javax.swing.GroupLayout.PREFERRED_SIZE)))
                        .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))))
        );
        P_EmployeeLayout.setVerticalGroup(
            P_EmployeeLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(P_EmployeeLayout.createSequentialGroup()
                .addGap(47, 47, 47)
                .addGroup(P_EmployeeLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(idTF, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(Id)
                    .addComponent(jLabel2))
                .addGroup(P_EmployeeLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(P_EmployeeLayout.createSequentialGroup()
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(P_EmployeeLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(firstNameTF, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(Name, javax.swing.GroupLayout.PREFERRED_SIZE, 16, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(P_EmployeeLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(lastNameTF, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(LastName, javax.swing.GroupLayout.PREFERRED_SIZE, 16, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(P_EmployeeLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(birthdateTF, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(BirthDate))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(P_EmployeeLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addGroup(P_EmployeeLayout.createSequentialGroup()
                                .addGroup(P_EmployeeLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                    .addComponent(cityTF, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(City))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addGroup(P_EmployeeLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                    .addComponent(blootypeTF, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(Blootype))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addGroup(P_EmployeeLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                    .addComponent(genderTF, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(Gender))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addGroup(P_EmployeeLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                    .addComponent(salaryTF, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(Salary))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addGroup(P_EmployeeLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                    .addComponent(turnTF, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(Turn))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addGroup(P_EmployeeLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                    .addComponent(startWorkTF, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(StartWork))
                                .addGap(6, 6, 6)
                                .addGroup(P_EmployeeLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                    .addComponent(endWorkTF, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(EndWork))
                                .addGap(10, 10, 10)
                                .addGroup(P_EmployeeLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                    .addComponent(Tf_TypeEmployee, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(LabelEmployee))
                                .addGap(18, 18, Short.MAX_VALUE))
                            .addGroup(P_EmployeeLayout.createSequentialGroup()
                                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 155, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(34, 34, 34)
                                .addGroup(P_EmployeeLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                    .addComponent(guardar)
                                    .addComponent(eliminar)
                                    .addComponent(SORT))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addGroup(P_EmployeeLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                    .addComponent(ExitEmployee)
                                    .addComponent(B_Search))
                                .addGap(67, 67, 67))))
                    .addGroup(P_EmployeeLayout.createSequentialGroup()
                        .addGap(17, 17, 17)
                        .addGroup(P_EmployeeLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel9)
                            .addComponent(Tf_Buscar, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(6, 6, 6)
                        .addComponent(ComboxEmployee, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(0, 0, Short.MAX_VALUE))))
        );

        cityTF.getAccessibleContext().setAccessibleName("CITY");
        firstNameTF.getAccessibleContext().setAccessibleName("NAMEFIRST");
        lastNameTF.getAccessibleContext().setAccessibleName("LASTNAME");
        birthdateTF.getAccessibleContext().setAccessibleName("BIRTHDATE");
        idTF.getAccessibleContext().setAccessibleName("ID");
        blootypeTF.getAccessibleContext().setAccessibleName("BLOOTYPE");
        genderTF.getAccessibleContext().setAccessibleName("GENDER");
        Tf_TypeEmployee.getAccessibleContext().setAccessibleName("TYPELABORS");

        jTabbedPane2.addTab("CREATE EMPLOYEE", P_Employee);

        P_Patient.setBackground(new java.awt.Color(204, 0, 0));

        idPatient.setForeground(new java.awt.Color(255, 255, 255));
        idPatient.setText("ID");

        firstNamePa.setForeground(new java.awt.Color(255, 255, 255));
        firstNamePa.setText("FIRST NAME");

        lastNamePa.setForeground(new java.awt.Color(255, 255, 255));
        lastNamePa.setText("LAST NAME");

        birthDatePa.setForeground(new java.awt.Color(255, 255, 255));
        birthDatePa.setText("BIRTHDATE:");

        cityPa.setForeground(new java.awt.Color(255, 255, 255));
        cityPa.setText("CITY:");

        blootypePa.setForeground(new java.awt.Color(255, 255, 255));
        blootypePa.setText("BLOOTYPE:");

        genderPa.setForeground(new java.awt.Color(255, 255, 255));
        genderPa.setText("GENDER:");

        jLabel4.setFont(new java.awt.Font("Dialog", 1, 24)); // NOI18N
        jLabel4.setForeground(new java.awt.Color(255, 255, 255));
        jLabel4.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel4.setText(" PATIENT HOSPITALIZATION");

        Tf_PatientID.setBackground(new java.awt.Color(255, 255, 255));
        Tf_PatientID.setForeground(new java.awt.Color(0, 0, 0));
        Tf_PatientID.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                Tf_PatientIDActionPerformed(evt);
            }
        });

        Tf_PatientNAME.setBackground(new java.awt.Color(255, 255, 255));
        Tf_PatientNAME.setForeground(new java.awt.Color(0, 0, 0));
        Tf_PatientNAME.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                Tf_PatientNAMEActionPerformed(evt);
            }
        });

        Tf_PatientLASTNAME.setBackground(new java.awt.Color(255, 255, 255));
        Tf_PatientLASTNAME.setForeground(new java.awt.Color(0, 0, 0));
        Tf_PatientLASTNAME.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                Tf_PatientLASTNAMEActionPerformed(evt);
            }
        });

        Tf_PatientBIRTHDATE.setBackground(new java.awt.Color(255, 255, 255));
        Tf_PatientBIRTHDATE.setForeground(new java.awt.Color(0, 0, 0));
        Tf_PatientBIRTHDATE.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                Tf_PatientBIRTHDATEActionPerformed(evt);
            }
        });

        Tf_PatientCITY.setBackground(new java.awt.Color(255, 255, 255));
        Tf_PatientCITY.setForeground(new java.awt.Color(0, 0, 0));
        Tf_PatientCITY.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                Tf_PatientCITYActionPerformed(evt);
            }
        });

        Tf_PatientBLOOTYPE.setBackground(new java.awt.Color(255, 255, 255));
        Tf_PatientBLOOTYPE.setForeground(new java.awt.Color(0, 0, 0));
        Tf_PatientBLOOTYPE.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                Tf_PatientBLOOTYPEActionPerformed(evt);
            }
        });

        Tf_PatientGENDER.setBackground(new java.awt.Color(255, 255, 255));
        Tf_PatientGENDER.setForeground(new java.awt.Color(0, 0, 0));
        Tf_PatientGENDER.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                Tf_PatientGENDERActionPerformed(evt);
            }
        });

        Tf_PatientDEPARTURETIME.setBackground(new java.awt.Color(255, 255, 255));
        Tf_PatientDEPARTURETIME.setForeground(new java.awt.Color(0, 0, 0));
        Tf_PatientDEPARTURETIME.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                Tf_PatientDEPARTURETIMEActionPerformed(evt);
            }
        });

        entryTimePatient.setForeground(new java.awt.Color(255, 255, 255));
        entryTimePatient.setText("ENTRY TIME:");

        departureTimePa.setForeground(new java.awt.Color(255, 255, 255));
        departureTimePa.setText("DEPARTURE TIME");

        Tf_PatientDIAGNOSTIC.setBackground(new java.awt.Color(255, 255, 255));
        Tf_PatientDIAGNOSTIC.setForeground(new java.awt.Color(0, 0, 0));
        Tf_PatientDIAGNOSTIC.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                Tf_PatientDIAGNOSTICActionPerformed(evt);
            }
        });

        Tf_PatientENTRYTIME.setBackground(new java.awt.Color(255, 255, 255));
        Tf_PatientENTRYTIME.setForeground(new java.awt.Color(0, 0, 0));
        Tf_PatientENTRYTIME.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                Tf_PatientENTRYTIMEActionPerformed(evt);
            }
        });

        diagnosticPatient.setForeground(new java.awt.Color(255, 255, 255));
        diagnosticPatient.setText("DIAGNOSTIC:");

        Doctor_ComboBox.setBackground(new java.awt.Color(255, 255, 255));

        Nurse_ComboBox.setBackground(new java.awt.Color(255, 255, 255));
        Nurse_ComboBox.setToolTipText("");

        DoctorPat.setForeground(new java.awt.Color(255, 255, 255));
        DoctorPat.setText("DOCTOR:");

        nursePat.setForeground(new java.awt.Color(255, 255, 255));
        nursePat.setText("NURSE:");

        tablePatient.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null}
            },
            new String [] {
                "Title 1", "Title 2", "Title 3", "Title 4", "Title 5", "Title 6"
            }
        ));
        tablePatient.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                tablePatientMouseClicked(evt);
            }
        });
        jScrollPane3.setViewportView(tablePatient);

        savePatient.setBackground(new java.awt.Color(255, 255, 255));
        savePatient.setText("SAVE");
        savePatient.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                savePatientActionPerformed(evt);
            }
        });

        deletePatient.setBackground(new java.awt.Color(255, 255, 255));
        deletePatient.setText("DELETE");
        deletePatient.setEnabled(false);
        deletePatient.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                deletePatientActionPerformed(evt);
            }
        });

        RoomPat.setForeground(new java.awt.Color(255, 255, 255));
        RoomPat.setText("ROOM:");

        Room_ComboBox.setBackground(new java.awt.Color(255, 255, 255));

        sortPatient.setBackground(new java.awt.Color(255, 255, 255));
        sortPatient.setText("SORT");
        sortPatient.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                sortPatientActionPerformed(evt);
            }
        });

        ExitPatient.setBackground(new java.awt.Color(255, 255, 255));
        ExitPatient.setText("EXIT");
        ExitPatient.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                ExitPatientActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout P_PatientLayout = new javax.swing.GroupLayout(P_Patient);
        P_Patient.setLayout(P_PatientLayout);
        P_PatientLayout.setHorizontalGroup(
            P_PatientLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(P_PatientLayout.createSequentialGroup()
                .addGap(59, 59, 59)
                .addGroup(P_PatientLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(P_PatientLayout.createSequentialGroup()
                        .addGroup(P_PatientLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addGroup(P_PatientLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                .addGroup(P_PatientLayout.createSequentialGroup()
                                    .addGap(5, 5, 5)
                                    .addGroup(P_PatientLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                        .addComponent(departureTimePa)
                                        .addComponent(entryTimePatient)))
                                .addComponent(cityPa)
                                .addComponent(birthDatePa)
                                .addComponent(lastNamePa))
                            .addGroup(P_PatientLayout.createSequentialGroup()
                                .addComponent(firstNamePa)
                                .addGap(38, 38, 38)))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 51, Short.MAX_VALUE)
                        .addGroup(P_PatientLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(Tf_PatientID, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 166, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addGroup(P_PatientLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                .addGroup(P_PatientLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                    .addComponent(Tf_PatientBLOOTYPE)
                                    .addComponent(Tf_PatientCITY)
                                    .addComponent(Tf_PatientNAME)
                                    .addComponent(Tf_PatientBIRTHDATE)
                                    .addComponent(Tf_PatientGENDER)
                                    .addComponent(Tf_PatientLASTNAME, javax.swing.GroupLayout.PREFERRED_SIZE, 166, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addComponent(Tf_PatientENTRYTIME, javax.swing.GroupLayout.PREFERRED_SIZE, 166, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addComponent(Tf_PatientDEPARTURETIME, javax.swing.GroupLayout.PREFERRED_SIZE, 166, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addComponent(Tf_PatientDIAGNOSTIC, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 166, javax.swing.GroupLayout.PREFERRED_SIZE)))
                        .addGroup(P_PatientLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(P_PatientLayout.createSequentialGroup()
                                .addGap(103, 103, 103)
                                .addGroup(P_PatientLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(DoctorPat)
                                    .addComponent(nursePat)
                                    .addComponent(RoomPat))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 51, Short.MAX_VALUE)
                                .addGroup(P_PatientLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(Doctor_ComboBox, javax.swing.GroupLayout.PREFERRED_SIZE, 166, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(Nurse_ComboBox, javax.swing.GroupLayout.PREFERRED_SIZE, 166, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(Room_ComboBox, javax.swing.GroupLayout.PREFERRED_SIZE, 166, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addGap(106, 106, 106))
                            .addGroup(P_PatientLayout.createSequentialGroup()
                                .addGap(64, 64, 64)
                                .addComponent(savePatient, javax.swing.GroupLayout.PREFERRED_SIZE, 106, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(18, 18, 18)
                                .addGroup(P_PatientLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(ExitPatient, javax.swing.GroupLayout.PREFERRED_SIZE, 106, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addGroup(P_PatientLayout.createSequentialGroup()
                                        .addComponent(deletePatient, javax.swing.GroupLayout.PREFERRED_SIZE, 107, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addGap(18, 18, 18)
                                        .addComponent(sortPatient, javax.swing.GroupLayout.PREFERRED_SIZE, 106, javax.swing.GroupLayout.PREFERRED_SIZE)))
                                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))))
                    .addGroup(P_PatientLayout.createSequentialGroup()
                        .addComponent(idPatient, javax.swing.GroupLayout.PREFERRED_SIZE, 40, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(0, 0, Short.MAX_VALUE))
                    .addGroup(P_PatientLayout.createSequentialGroup()
                        .addGap(2, 2, 2)
                        .addGroup(P_PatientLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(P_PatientLayout.createSequentialGroup()
                                .addComponent(diagnosticPatient)
                                .addGap(0, 708, Short.MAX_VALUE))
                            .addGroup(P_PatientLayout.createSequentialGroup()
                                .addGroup(P_PatientLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addGroup(P_PatientLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                        .addGroup(P_PatientLayout.createSequentialGroup()
                                            .addGap(60, 60, 60)
                                            .addComponent(jLabel6))
                                        .addComponent(blootypePa, javax.swing.GroupLayout.Alignment.TRAILING))
                                    .addComponent(genderPa, javax.swing.GroupLayout.PREFERRED_SIZE, 60, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addComponent(jScrollPane3, javax.swing.GroupLayout.PREFERRED_SIZE, 444, javax.swing.GroupLayout.PREFERRED_SIZE)))
                        .addGap(18, 18, 18))))
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, P_PatientLayout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(jLabel4)
                .addGap(91, 91, 91))
        );
        P_PatientLayout.setVerticalGroup(
            P_PatientLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(P_PatientLayout.createSequentialGroup()
                .addGap(27, 27, 27)
                .addComponent(jLabel4)
                .addGap(14, 14, 14)
                .addGroup(P_PatientLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(P_PatientLayout.createSequentialGroup()
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 144, Short.MAX_VALUE)
                        .addGroup(P_PatientLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(P_PatientLayout.createSequentialGroup()
                                .addComponent(jScrollPane3, javax.swing.GroupLayout.PREFERRED_SIZE, 126, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(69, 69, 69))
                            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, P_PatientLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                .addComponent(savePatient)
                                .addComponent(deletePatient)
                                .addComponent(sortPatient)))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(ExitPatient)
                        .addGap(53, 53, 53))
                    .addGroup(P_PatientLayout.createSequentialGroup()
                        .addGroup(P_PatientLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(P_PatientLayout.createSequentialGroup()
                                .addGap(178, 178, 178)
                                .addComponent(jLabel6))
                            .addGroup(P_PatientLayout.createSequentialGroup()
                                .addGroup(P_PatientLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                    .addComponent(Tf_PatientID, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(idPatient))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addGroup(P_PatientLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                    .addComponent(Tf_PatientNAME, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(firstNamePa)
                                    .addComponent(RoomPat)
                                    .addComponent(Room_ComboBox, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addGroup(P_PatientLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                    .addComponent(Tf_PatientLASTNAME, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(lastNamePa)
                                    .addComponent(DoctorPat)
                                    .addComponent(Doctor_ComboBox, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addGroup(P_PatientLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                    .addComponent(Tf_PatientBIRTHDATE, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(birthDatePa)
                                    .addComponent(nursePat)
                                    .addComponent(Nurse_ComboBox, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addGroup(P_PatientLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                    .addComponent(Tf_PatientCITY, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(cityPa))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addGroup(P_PatientLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                    .addComponent(Tf_PatientBLOOTYPE, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(blootypePa))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addGroup(P_PatientLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                    .addComponent(Tf_PatientGENDER, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(genderPa))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addGroup(P_PatientLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                    .addComponent(Tf_PatientENTRYTIME, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(entryTimePatient))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addGroup(P_PatientLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                    .addComponent(Tf_PatientDEPARTURETIME, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(departureTimePa))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addGroup(P_PatientLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                    .addComponent(Tf_PatientDIAGNOSTIC, javax.swing.GroupLayout.PREFERRED_SIZE, 63, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(diagnosticPatient))))
                        .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))))
        );

        jTabbedPane2.addTab("ENTER PATIENT", P_Patient);

        jLabel1.setBackground(new java.awt.Color(0, 0, 0));
        jLabel1.setForeground(new java.awt.Color(0, 0, 0));
        jLabel1.setCursor(new java.awt.Cursor(java.awt.Cursor.DEFAULT_CURSOR));

        imagen.setIcon(new javax.swing.ImageIcon(getClass().getResource("/view/Imagen_Hospital.jpg"))); // NOI18N

        javax.swing.GroupLayout colorLayout = new javax.swing.GroupLayout(color);
        color.setLayout(colorLayout);
        colorLayout.setHorizontalGroup(
            colorLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, colorLayout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(imagen)
                .addContainerGap())
        );
        colorLayout.setVerticalGroup(
            colorLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, colorLayout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(imagen)
                .addGap(105, 105, 105))
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jTabbedPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 866, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(color, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jLabel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap(60, Short.MAX_VALUE)
                .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 362, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(123, 123, 123))
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(jTabbedPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 0, Short.MAX_VALUE)
                    .addComponent(color, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addContainerGap())
        );

        jTabbedPane2.getAccessibleContext().setAccessibleName("DOCTOR");

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void cityTFActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cityTFActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_cityTFActionPerformed

    private void firstNameTFActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_firstNameTFActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_firstNameTFActionPerformed

    private void lastNameTFActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_lastNameTFActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_lastNameTFActionPerformed

    private void birthdateTFActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_birthdateTFActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_birthdateTFActionPerformed

    private void idTFActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_idTFActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_idTFActionPerformed

    private void blootypeTFActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_blootypeTFActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_blootypeTFActionPerformed

    private void genderTFActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_genderTFActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_genderTFActionPerformed

    private void salaryTFActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_salaryTFActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_salaryTFActionPerformed

    private void turnTFActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_turnTFActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_turnTFActionPerformed

    private void startWorkTFActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_startWorkTFActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_startWorkTFActionPerformed

    private void endWorkTFActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_endWorkTFActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_endWorkTFActionPerformed

    private void Tf_TypeEmployeeActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_Tf_TypeEmployeeActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_Tf_TypeEmployeeActionPerformed

    private void guardarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_guardarActionPerformed

        try {

            if (ComboxEmployee.getSelectedItem().toString().equals(nurse.getClass().getSimpleName())) {
                try {

                    nurse = new Nurse(Tf_TypeEmployee.getText(), Double.parseDouble(salaryTF.getText()), turnTF.getText(), format.parse(startWorkTF.getText()), format.parse(endWorkTF.getText()), Integer.parseInt(idTF.getText()), firstNameTF.getText(), lastNameTF.getText(), birthFormat.parse(birthdateTF.getText()), cityTF.getText(), blootypeTF.getText(), genderTF.getText());

                    if (updateFlag) {
                        nc.merge(nurse.getId(), nurse);
                    } else {
                        nc.create(nurse);
                    }
                    refreshTable();
                    clearForm();

                } catch (Exception ex) {
                    ex.printStackTrace();
                    JOptionPane.showMessageDialog(this, "LO SENTIMOS, NO SE PUDO GUARDAR LA ENFERMERA");
                }
            } else if (ComboxEmployee.getSelectedItem().toString().equals(doctor.getClass().getSimpleName())) {
                try {
                    doctor = new Doctor(Tf_TypeEmployee.getText(), Double.parseDouble(salaryTF.getText()), turnTF.getText(), format.parse(startWorkTF.getText()), format.parse(endWorkTF.getText()), Integer.parseInt(idTF.getText()), firstNameTF.getText(), lastNameTF.getText(), birthFormat.parse(birthdateTF.getText()), cityTF.getText(), blootypeTF.getText(), genderTF.getText());

                    if (updateFlag) {
                        dc.merge(doctor.getId(), doctor);
                    } else {
                        dc.create(doctor);
                    }
                    refreshTable();
                    clearForm();

                } catch (Exception ex) {
                    ex.printStackTrace();
                    JOptionPane.showMessageDialog(this, "LO SENTIMOS, NO SE PUDO GUARDAR EL DOCTOR");
                }
            }

        } catch (Exception ex) {
            ex.printStackTrace();
            JOptionPane.showMessageDialog(this, "LO SENTIMOS, NO SE PUDO GUARDAR EL EMPLEADO");
        }
    }//GEN-LAST:event_guardarActionPerformed

    private void eliminarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_eliminarActionPerformed
        try {

            if (ComboxEmployee.getSelectedItem().toString().equals(nurse.getClass().getSimpleName())) {
                int index = (Integer) employeeTable.getValueAt(employeeTable.getSelectedRow(), 0);
                nc.delete(index);

                refreshTable();
                clearForm();

            } else if (ComboxEmployee.getSelectedItem().toString().equals(doctor.getClass().getSimpleName())) {
                int index = (Integer) employeeTable.getValueAt(employeeTable.getSelectedRow(), 0);
                dc.delete(index);

                refreshTable();
                clearForm();
            }
        } catch (Exception ex) {
            ex.printStackTrace();
            JOptionPane.showMessageDialog(this, "LO SENTIMOS, NO SE PUDO ELIMINAR EL EMPLEADO");
        }
    }//GEN-LAST:event_eliminarActionPerformed

    private void employeeTableMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_employeeTableMouseClicked

        try {

            if (ComboxEmployee.getSelectedItem().toString().equals(nurse.getClass().getSimpleName())) {
                //Get select object index
                int index = (Integer) employeeTable.getValueAt(employeeTable.getSelectedRow(), 0);
                //Get nurse by ID
                nurse = (Nurse) nc.findOne(index);
                //Set form values

                idTF.setText(nurse.getId().toString());
                firstNameTF.setText(nurse.getNameFirst());
                lastNameTF.setText(nurse.getLastFirst());
                birthdateTF.setText(birthFormat.format(nurse.getBirthDate()));
                cityTF.setText(nurse.getCity());
                blootypeTF.setText(nurse.getBlooType());
                genderTF.setText(nurse.getGender());
                salaryTF.setText(String.valueOf(nurse.getSalary()));
                turnTF.setText(nurse.getTurn());
                startWorkTF.setText(format.format(nurse.getStartDateWork()));
                endWorkTF.setText(format.format(nurse.getEndDateWork()));
                Tf_TypeEmployee.setText(nurse.getTypeLabors());

                //Updates UI values
                guardar.setText("UPDATE");
                updateFlag = true;
                eliminar.setEnabled(true);

            } else if (ComboxEmployee.getSelectedItem().toString().equals(doctor.getClass().getSimpleName())) {

                //Get select object index
                int index = (Integer) employeeTable.getValueAt(employeeTable.getSelectedRow(), 0);

                //Get nurse by ID
                doctor = (Doctor) dc.findOne(index);
                //Set form values

                idTF.setText(doctor.getId().toString());
                firstNameTF.setText(doctor.getNameFirst());
                lastNameTF.setText(doctor.getLastFirst());
                birthdateTF.setText(birthFormat.format(doctor.getBirthDate()));
                cityTF.setText(doctor.getCity());
                blootypeTF.setText(doctor.getBlooType());
                genderTF.setText(doctor.getGender());
                salaryTF.setText(String.valueOf(doctor.getSalary()));
                turnTF.setText(doctor.getTurn());
                startWorkTF.setText(format.format(doctor.getStartDateWork()));
                endWorkTF.setText(format.format(doctor.getEndDateWork()));
                Tf_TypeEmployee.setText(doctor.getSpecialty());

                //Updates UI values
                guardar.setText("UPDATE");
                eliminar.setEnabled(true);
            }

        } catch (Exception ex) {
            ex.printStackTrace();
            JOptionPane.showMessageDialog(this, "LO SENTIMOS, NO SE PUDO TRAER EL EMPLEADO");
        }

    }//GEN-LAST:event_employeeTableMouseClicked

    private void B_EnterEmployeeActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_B_EnterEmployeeActionPerformed
        jTabbedPane2.setSelectedIndex(1);
        jTabbedPane2.setEnabledAt(0, false);
        jTabbedPane2.setEnabledAt(1, true);
    }//GEN-LAST:event_B_EnterEmployeeActionPerformed

    private void B_ExitActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_B_ExitActionPerformed

        //SE VERIFICA SI EL USUARIO DESEA SALIR.
        Object[] opciones = {"ACEPTAR", "CANCELAR"};
        int eleccion = JOptionPane.showOptionDialog(confirmation, "DESEA SALIR DEL SISTEMA", "CONFIRMACIÓN",
                JOptionPane.YES_NO_OPTION,
                JOptionPane.QUESTION_MESSAGE, null, opciones, "ACEPTAR");

        if (eleccion == JOptionPane.YES_OPTION) {
            System.exit(0);
        }
    }//GEN-LAST:event_B_ExitActionPerformed

    private void B_EnterPatientActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_B_EnterPatientActionPerformed
        jTabbedPane2.setSelectedIndex(2);
        jTabbedPane2.setEnabledAt(1, false);
        jTabbedPane2.setEnabledAt(2, true);
    }//GEN-LAST:event_B_EnterPatientActionPerformed

    private void Tf_PatientIDActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_Tf_PatientIDActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_Tf_PatientIDActionPerformed

    private void Tf_PatientNAMEActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_Tf_PatientNAMEActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_Tf_PatientNAMEActionPerformed

    private void Tf_PatientLASTNAMEActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_Tf_PatientLASTNAMEActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_Tf_PatientLASTNAMEActionPerformed

    private void Tf_PatientBIRTHDATEActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_Tf_PatientBIRTHDATEActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_Tf_PatientBIRTHDATEActionPerformed

    private void Tf_PatientCITYActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_Tf_PatientCITYActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_Tf_PatientCITYActionPerformed

    private void Tf_PatientBLOOTYPEActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_Tf_PatientBLOOTYPEActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_Tf_PatientBLOOTYPEActionPerformed

    private void Tf_PatientGENDERActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_Tf_PatientGENDERActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_Tf_PatientGENDERActionPerformed

    private void Tf_PatientDEPARTURETIMEActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_Tf_PatientDEPARTURETIMEActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_Tf_PatientDEPARTURETIMEActionPerformed

    private void Tf_PatientDIAGNOSTICActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_Tf_PatientDIAGNOSTICActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_Tf_PatientDIAGNOSTICActionPerformed

    private void Tf_PatientENTRYTIMEActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_Tf_PatientENTRYTIMEActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_Tf_PatientENTRYTIMEActionPerformed

    private void savePatientActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_savePatientActionPerformed
        try {
            MapHelper selected = (MapHelper) Doctor_ComboBox.getSelectedItem();
            MapHelper selected1 = (MapHelper) Nurse_ComboBox.getSelectedItem();
            MapHelper selected2 = (MapHelper) Room_ComboBox.getSelectedItem();

            Patient patient = new Patient(format.parse(Tf_PatientENTRYTIME.getText()), format.parse(Tf_PatientDEPARTURETIME.getText()), Tf_PatientDIAGNOSTIC.getText(), (Doctor) dc.findOne(selected.getKey()), (Nurse) nc.findOne(selected1.getKey()), (Room) rc.findOne(selected2.getKey()), Integer.parseInt(Tf_PatientID.getText()), Tf_PatientNAME.getText(), Tf_PatientLASTNAME.getText(), birthFormat.parse(Tf_PatientBIRTHDATE.getText()), Tf_PatientCITY.getText(), Tf_PatientBLOOTYPE.getText(), Tf_PatientGENDER.getText());

            if (updateFlag) {
                pc.merge(patient.getId(), patient);
            } else {
                pc.create(patient);
            }
            refreshTablePatient();
            clearFormPatient();
        } catch (Exception ex) {
            ex.printStackTrace();
            JOptionPane.showMessageDialog(this, "LO SENTIMOS, NO SE PUDO GUARDAR LOS PACIENTES");
        }
    }//GEN-LAST:event_savePatientActionPerformed

    private void deletePatientActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_deletePatientActionPerformed
        try {
            int index = (Integer) tablePatient.getValueAt(tablePatient.getSelectedRow(), 0);
            pc.delete(index);

            refreshTablePatient();
            clearFormPatient();
        } catch (Exception ex) {
            ex.printStackTrace();
            JOptionPane.showMessageDialog(this, "LO SENTIMOS, NO SE PUDO ELIMINAR LOS PACIENTES");
        }
    }//GEN-LAST:event_deletePatientActionPerformed

    private void tablePatientMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_tablePatientMouseClicked
        try {

            //Get select object index
            int index = (Integer) tablePatient.getValueAt(tablePatient.getSelectedRow(), 0);
            //Get nurse by ID
            Patient patient = (Patient) pc.findOne(index);
            //Set form values

            Tf_PatientID.setText(patient.getId().toString());
            Tf_PatientNAME.setText(patient.getNameFirst());
            Tf_PatientLASTNAME.setText(patient.getLastFirst());
            Tf_PatientBIRTHDATE.setText(birthFormat.format(patient.getBirthDate()));
            Tf_PatientCITY.setText(patient.getCity());
            Tf_PatientBLOOTYPE.setText(patient.getBlooType());
            Tf_PatientGENDER.setText(patient.getGender());
            Tf_PatientENTRYTIME.setText(format.format(patient.getEntryTime()));
            Tf_PatientDEPARTURETIME.setText(format.format(patient.getDepartureTime()));
            Tf_PatientDIAGNOSTIC.setText(patient.getDiagnostic());

            //Updates UI values
            updateFlag = true;
            savePatient.setText("UPDATE");
            deletePatient.setEnabled(true);

        } catch (Exception ex) {
            ex.printStackTrace();
            JOptionPane.showMessageDialog(this, "LO SENTIMOS, NO SE PUDO TRAER LOS PACIENTES");
        }
    }//GEN-LAST:event_tablePatientMouseClicked

    private void SORTActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_SORTActionPerformed
        if (ComboxEmployee.getSelectedItem().toString().equals(nurse.getClass().getSimpleName())) {
            nc.sort();
            refreshTable();
            clearForm();
        } else if (ComboxEmployee.getSelectedItem().toString().equals(doctor.getClass().getSimpleName())) {
            dc.sort();
            refreshTable();
            clearForm();
        }
    }//GEN-LAST:event_SORTActionPerformed

    private void sortPatientActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_sortPatientActionPerformed
        pc.sort();
        refreshTable();
        clearForm();
    }//GEN-LAST:event_sortPatientActionPerformed

    private void ComboxEmployeeActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_ComboxEmployeeActionPerformed

        if (ComboxEmployee.getSelectedItem().toString().equals(nurse.getClass().getSimpleName())) {
            try {
                LabelEmployee.setText("");
                LabelEmployee.setText("TYPELABORS:");
                refreshTable();

            } catch (Exception ex) {
                ex.printStackTrace();
            }
        } else if (ComboxEmployee.getSelectedItem().toString().equals(doctor.getClass().getSimpleName())) {
            try {
                LabelEmployee.setText("");
                LabelEmployee.setText("SPECIALTY:");
                refreshTable();

            } catch (Exception ex) {
                ex.printStackTrace();
            }
        }
    }//GEN-LAST:event_ComboxEmployeeActionPerformed

    private void ExitEmployeeActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_ExitEmployeeActionPerformed

        jTabbedPane2.setSelectedIndex(0);
        jTabbedPane2.setEnabledAt(1, false);
        jTabbedPane2.setEnabledAt(0, true);

    }//GEN-LAST:event_ExitEmployeeActionPerformed

    private void ExitPatientActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_ExitPatientActionPerformed

        jTabbedPane2.setSelectedIndex(0);
        jTabbedPane2.setEnabledAt(2, false);
        jTabbedPane2.setEnabledAt(0, true);

    }//GEN-LAST:event_ExitPatientActionPerformed

    private void Tf_BuscarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_Tf_BuscarActionPerformed

    }//GEN-LAST:event_Tf_BuscarActionPerformed

    private void B_SearchActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_B_SearchActionPerformed

    }//GEN-LAST:event_B_SearchActionPerformed

    private void B_SearchMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_B_SearchMouseClicked
        try {

            if (ComboxEmployee.getSelectedItem().toString().equals(nurse.getClass().getSimpleName())) {
                String[] data = {Tf_Buscar.getText(), "", "", null, "", "", "", "0", "", null, null, ""};
                JOptionPane.showMessageDialog(this, "LAS ENFERMERAS ENCONTRADAS SON: \n\n" + filterNurse(data));
                Tf_Buscar.setText("");
            } else if (ComboxEmployee.getSelectedItem().toString().equals(doctor.getClass().getSimpleName())) {
                String[] data = {Tf_Buscar.getText(), "", "", null, "", "", "", "0", "", null, null, ""};
                JOptionPane.showMessageDialog(this, "LOS DOCTORES ENCONTRADAS SON: \n\n" + filterDoctor(data));
                Tf_Buscar.setText("");
            }
        } catch (Exception e) {
            e.printStackTrace();
            JOptionPane.showMessageDialog(this, "LO SENTIMOS, NO SE PUDO BUSCAR LA ENFERMERA");
        }
    }//GEN-LAST:event_B_SearchMouseClicked

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(MainView.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(MainView.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(MainView.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(MainView.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new MainView().setVisible(true);
            }
        });
    }

    private String filterNurse(String[] args) {

        List<Nurse> filterList = new ArrayList<>();

        int id = Integer.parseInt(Tf_Buscar.getText());

        try {
            for (Nurse current : nc.findAll()) {
                if (current.getId() == id) {
                    filterList.add(current);
                }
            }

        } catch (Exception ex) {
            ex.printStackTrace();
            JOptionPane.showMessageDialog(this, "LO SENTIMOS, NO SE PUDO FILTRAR LA ENFERMERA");
        }

        return Arrays.toString(filterList.toArray());
    }
    
    private String filterDoctor(String[] args) {

        List<Doctor> filterList = new ArrayList<>();

        int id = Integer.parseInt(Tf_Buscar.getText());

        try {
            for (Doctor current : dc.findAll()) {
                if (current.getId() == id) {
                    filterList.add(current);
                }
            }

        } catch (Exception ex) {
            ex.printStackTrace();
            JOptionPane.showMessageDialog(this, "LO SENTIMOS, NO SE PUDO FILTRAR LA ENFERMERA");
        }

        return Arrays.toString(filterList.toArray());
    }
    

    private void refreshTable() {

        try {

            if (ComboxEmployee.getSelectedItem().toString().equals(nurse.getClass().getSimpleName())) {
                clearForm();
                tableModel.setRowCount(0);
                for (Object object : nc.findAll()) {
                    Nurse current = (Nurse) object;
                    tableModel.addRow(new Object[]{current.getId(), current.getNameFirst(), current.getLastFirst(), current.getTypeLabors()});
                }
            } else if (ComboxEmployee.getSelectedItem().toString().equals(doctor.getClass().getSimpleName())) {
                clearForm();
                tableModel.setRowCount(0);
                for (Object object : dc.findAll()) {
                    Doctor current = (Doctor) object;
                    tableModel.addRow(new Object[]{current.getId(), current.getNameFirst(), current.getLastFirst(), current.getSpecialty()});
                }
            }
        } catch (Exception ex) {
            ex.printStackTrace();
            JOptionPane.showMessageDialog(this, "LO SENTIMOS, NO SE PUDO MOSTRAR LA LISTA");
        }
    }

    private void clearForm() {

        idTF.setText("");
        firstNameTF.setText("");
        lastNameTF.setText("");
        birthdateTF.setText("");
        cityTF.setText("");
        blootypeTF.setText("");
        genderTF.setText("");
        salaryTF.setText("");
        turnTF.setText("");
        startWorkTF.setText("");
        endWorkTF.setText("");
        Tf_TypeEmployee.setText("");

        updateFlag = false;
        guardar.setText("SAVE");
        eliminar.setEnabled(false);

    }

    private void refreshTablePatient() {

        try {
            tableModel2.setRowCount(0);
            for (Object object : pc.findAll()) {
                Patient current = (Patient) object;
                tableModel2.addRow(new Object[]{current.getId(), current.getNameFirst(), current.getLastFirst(), current.getDoctorPatient(), current.getNursePatient(), current.getDiagnostic(), current.getRoomPatient()});
            }
        } catch (Exception ex) {
            ex.printStackTrace();
            JOptionPane.showMessageDialog(this, "LO SENTIMOS, NO SE PUDO MOSTRAR LA LISTA");
        }
    }

    private void clearFormPatient() {

        Tf_PatientID.setText("");
        Tf_PatientNAME.setText("");
        Tf_PatientLASTNAME.setText("");
        Tf_PatientBIRTHDATE.setText("");
        Tf_PatientCITY.setText("");
        Tf_PatientBLOOTYPE.setText("");
        Tf_PatientGENDER.setText("");
        Tf_PatientENTRYTIME.setText("");
        Tf_PatientDEPARTURETIME.setText("");
        Tf_PatientDIAGNOSTIC.setText("");

        updateFlag = false;
        guardar.setText("SAVE");
        eliminar.setEnabled(false);

    }

    private void populateDoctor() {
        try {

            Iterator it = dc.findAll().iterator();
            while (it.hasNext()) {
                Doctor_ComboBox.addItem(new MapHelper(it.next()));
            }

        } catch (Exception ex) {
            ex.printStackTrace();
            JOptionPane.showMessageDialog(this, "LO SENTIMOS, NO SE PUDO MOSTRAR LA LISTA");
        }
    }

    private void populateNurse() {
        try {

            Iterator it = nc.findAll().iterator();
            while (it.hasNext()) {
                Nurse_ComboBox.addItem(new MapHelper(it.next()));
            }

        } catch (Exception ex) {
            ex.printStackTrace();
            JOptionPane.showMessageDialog(this, "LO SENTIMOS, NO SE PUDO MOSTRAR LA LISTA");
        }
    }

    private void populateRoom() {
        try {

            Iterator it = rc.findAll().iterator();
            while (it.hasNext()) {
                Room_ComboBox.addItem(new MapHelper(it.next()));
            }

        } catch (Exception ex) {
            ex.printStackTrace();
            JOptionPane.showMessageDialog(this, "LO SENTIMOS, NO SE PUDO MOSTRAR LA LISTA");
        }
    }


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton B_EnterEmployee;
    private javax.swing.JButton B_EnterPatient;
    private javax.swing.JButton B_Exit;
    private javax.swing.JButton B_Search;
    private javax.swing.JLabel BirthDate;
    private javax.swing.JLabel Blootype;
    private javax.swing.JLabel City;
    private javax.swing.JComboBox<String> ComboxEmployee;
    private javax.swing.JLabel DoctorPat;
    private javax.swing.JComboBox<MapHelper> Doctor_ComboBox;
    private javax.swing.JLabel EndWork;
    private javax.swing.JButton ExitEmployee;
    private javax.swing.JButton ExitPatient;
    private javax.swing.JLabel Gender;
    private javax.swing.JLabel Id;
    private javax.swing.JLabel LabelEmployee;
    private javax.swing.JLabel LastName;
    private javax.swing.JLabel Name;
    private javax.swing.JComboBox<MapHelper> Nurse_ComboBox;
    private javax.swing.JPanel P_Employee;
    private javax.swing.JPanel P_Main;
    private javax.swing.JPanel P_Patient;
    private javax.swing.JLabel RoomPat;
    private javax.swing.JComboBox<MapHelper> Room_ComboBox;
    private javax.swing.JButton SORT;
    private javax.swing.JLabel Salary;
    private javax.swing.JLabel StartWork;
    private javax.swing.JTextField Tf_Buscar;
    private javax.swing.JTextField Tf_PatientBIRTHDATE;
    private javax.swing.JTextField Tf_PatientBLOOTYPE;
    private javax.swing.JTextField Tf_PatientCITY;
    private javax.swing.JTextField Tf_PatientDEPARTURETIME;
    private javax.swing.JTextField Tf_PatientDIAGNOSTIC;
    private javax.swing.JTextField Tf_PatientENTRYTIME;
    private javax.swing.JTextField Tf_PatientGENDER;
    private javax.swing.JTextField Tf_PatientID;
    private javax.swing.JTextField Tf_PatientLASTNAME;
    private javax.swing.JTextField Tf_PatientNAME;
    private javax.swing.JTextField Tf_TypeEmployee;
    private javax.swing.JLabel Turn;
    private javax.swing.JLabel birthDatePa;
    private javax.swing.JTextField birthdateTF;
    private javax.swing.JLabel blootypePa;
    private javax.swing.JTextField blootypeTF;
    private javax.swing.JLabel cityPa;
    private javax.swing.JTextField cityTF;
    private javax.swing.JPanel color;
    private javax.swing.JButton deletePatient;
    private javax.swing.JLabel departureTimePa;
    private javax.swing.JLabel diagnosticPatient;
    private javax.swing.JButton eliminar;
    private javax.swing.JTable employeeTable;
    private javax.swing.JTextField endWorkTF;
    private javax.swing.JLabel entryTimePatient;
    private javax.swing.JLabel firstNamePa;
    private javax.swing.JTextField firstNameTF;
    private javax.swing.JLabel genderPa;
    private javax.swing.JTextField genderTF;
    private javax.swing.JButton guardar;
    private javax.swing.JLabel idPatient;
    private javax.swing.JTextField idTF;
    private javax.swing.JLabel imagen;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JLabel jLabel8;
    private javax.swing.JLabel jLabel9;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JScrollPane jScrollPane3;
    private javax.swing.JTabbedPane jTabbedPane2;
    private javax.swing.JTable jTable1;
    private javax.swing.JLabel lastNamePa;
    private javax.swing.JTextField lastNameTF;
    private javax.swing.JLabel nursePat;
    private javax.swing.JTextField salaryTF;
    private javax.swing.JButton savePatient;
    private javax.swing.JButton sortPatient;
    private javax.swing.JTextField startWorkTF;
    private javax.swing.JTable tablePatient;
    private javax.swing.JTextField turnTF;
    // End of variables declaration//GEN-END:variables
}
